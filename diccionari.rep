struct TrieNode {
    TrieNode* _children[26]; // Hijos para cada letra (A-Z)
    bool isEndOfWord; // Indicador de si es una palabra completa
    TrieNode() : isEndOfWord(false) {
        fill(begin(_children), end(_children), nullptr);
    }
};

TrieNode* _arrel; // Ra√≠z del trie

nat countWords(TrieNode* node) const throw();
void satisfan_patroRecursive(TrieNode* node, const vector<string>& q, size_t index, string current, list<string>& L) const throw();
void llista_paraulesRecursive(TrieNode* node, nat k, string current, list<string>& L) const throw();
TrieNode* copyTrie(TrieNode* node) const;
void deleteTrie(TrieNode* node);